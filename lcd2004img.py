try:
    import PIL.Image
    import numpy
except ImportError:
    pass


__all__ = ['set_glyph', 'render', 'render_image']


_GLYPH_WIDTH = 5
_GLYPH_HEIGHT = 8

_GLYPH_TABLE = [
    0x0000000000, 0x0000000000, 0x0000000000, 0x0000000000,                # 00
    0x0000000000, 0x0000000000, 0x0000000000, 0x0000000000,                # 04
    0x0000000000, 0x0000000000, 0x0000000000, 0x0000000000,                # 08
    0x0000000000, 0x0000000000, 0x0000000000, 0x0000000000,                # 0c
    0x0000000000, 0x0000000000, 0x0000000000, 0x0000000000,                # 10
    0x0000000000, 0x0000000000, 0x0000000000, 0x0000000000,                # 14
    0x0000000000, 0x0000000000, 0x0000000000, 0x0000000000,                # 18
    0x0000000000, 0x0000000000, 0x0000000000, 0x0000000000,                # 1c
    0x0000000000, 0x0100021084, 0x000000294a, 0x0295f57d4a,                # 20
    0x011f4717c4, 0x0632222263, 0x0593511526, 0x0000000886,                # 24
    0x0208210888, 0x0088842082, 0x0009575480, 0x00084f9080,                # 28
    0x0088600000, 0x00000f8000, 0x018c000000, 0x0002222200,                # 2c
    0x03a33ae62e, 0x03884210c4, 0x07c444422e, 0x03a304111f,                # 30
    0x0211f4a988, 0x03a3083c3f, 0x03a317844c, 0x008422221f,                # 34
    0x03a317462e, 0x01910f462e, 0x000c6018c0, 0x00886018c0,                # 38
    0x0208208888, 0x0001f07c00, 0x0088882082, 0x010044422e,                # 3c
    0x03ab5b422e, 0x0463f8c62e, 0x03e317c62f, 0x03a210862e,                # 40
    0x01d318c527, 0x07c217843f, 0x004217843f, 0x07a31e862e,                # 44
    0x04631fc631, 0x038842108e, 0x019284211c, 0x0452519531,                # 48
    0x07c2108421, 0x04631ad771, 0x04639ace31, 0x03a318c62e,                # 4c
    0x004217c62f, 0x059358c62e, 0x045257c62f, 0x03e107043e,                # 50
    0x010842109f, 0x03a318c631, 0x011518c631, 0x02ab5ac631,                # 54
    0x0462a22a31, 0x0108454631, 0x07c222221f, 0x038421084e,                # 58
    0x0109f27d51, 0x039084210e, 0x0000004544, 0x07c0000000,                # 5c
    0x0000002082, 0x07a3e83800, 0x03e319b421, 0x03a210b800,                # 60
    0x07a31cda10, 0x0383f8b800, 0x0084238a4c, 0x03a1e8c7c0,                # 64
    0x046319b421, 0x0388421804, 0x0192843008, 0x024a32a421,                # 68
    0x0388421086, 0x04635aac00, 0x046319b400, 0x03a318b800,                # 6c
    0x0042f8bc00, 0x0421ecd800, 0x004219b400, 0x03e0e0b800,                # 70
    0x0324211c42, 0x05b318c400, 0x011518c400, 0x02ab58c400,                # 74
    0x0454454400, 0x03a1e8c400, 0x07c4447c00, 0x0208411088,                # 78
    0x0108421084, 0x0088441082, 0x0000000000, 0x0000000000,                # 7c
    0x0000000000, 0x0000000000, 0x0000000000, 0x0000000000,                # 80
    0x0000000000, 0x0000000000, 0x0000000000, 0x0000000000,                # 84
    0x0000000000, 0x0000000000, 0x0000000000, 0x0000000000,                # 88
    0x0000000000, 0x0000000000, 0x0000000000, 0x0000000000,                # 8c
    0x0000000000, 0x0000000000, 0x0000000000, 0x0000000000,                # 90
    0x0000000000, 0x0000000000, 0x0000000000, 0x0000000000,                # 94
    0x0000000000, 0x0000000000, 0x0000000000, 0x0000000000,                # 98
    0x0000000000, 0x0000000000, 0x0000000000, 0x0000000000,                # 9c
    0x0000000000000, 0x00001ca700000, 0x000000002109c, 0x00001c8420000,    # a0
    0x0000104100000, 0x0000000630000, 0x00001110fc3e0, 0x0000088c87c00,    # a4
    0x000010a622000, 0x00003211f9000, 0x00007c84f8000, 0x0000254cfa000,    # a8
    0x00000952f8800, 0x00007d0870000, 0x00003d0f43c00, 0x00003215a8000,    # ac
    0x00000000f8000, 0x000008846521f, 0x0000108531110, 0x000011108c7e4,    # b0
    0x00007c84213e0, 0x0000212a623e8, 0x0000265294be2, 0x00001084f93e4,    # b4
    0x000019108cbc0, 0x00001108427c2, 0x00007e10843e0, 0x0000088852bea,    # b8
    0x00001d109c060, 0x00004544443e0, 0x0000704254be2, 0x0000191094620,    # bc
    0x00001918acbc0, 0x00000884f90e8, 0x00001110ad6a0, 0x0000088427c0e,    # c0
    0x0000084a30842, 0x0000044427c84, 0x00007c00001c0, 0x00000544543e0,    # c4
    0x000012ae223e4, 0x0000088842108, 0x000046318a080, 0x000078210fc21,    # c8
    0x00001910843e0, 0x0000021041440, 0x000012b5213e4, 0x0000208a843e0,    # cc
    0x000041c0701c0, 0x000043f108880, 0x0000054454200, 0x00007042f8be0,    # d0
    0x0000084a97c42, 0x00007d08421c0, 0x00007e10fc3e0, 0x0000111087c0e,    # d4
    0x000008894a529, 0x000036b529480, 0x00000ca988420, 0x00007e318c7e0,    # d8
    0x000011108c7e0, 0x00001d1080060, 0x0000000000924, 0x0000000001ca7,    # dc
    0x00005929ac800, 0x00007a3e8380a, 0x0210be2f8b800, 0x00003a260b800,    # e0
    0x0210df318c400, 0x00003a292f800, 0x0210be3193000, 0x1d087a318f800,    # e4
    0x000008a427000, 0x0000000042d00, 0x0c94210843008, 0x00000000288a0,    # e8
    0x000011d52b880, 0x0000784711c42, 0x000046319b40e, 0x00003a318b80a,    # ec
    0x0210be319b400, 0x21087a31cd800, 0x00003a31fc5c0, 0x00000175d0000,    # f0
    0x00006d518b800, 0x00005b318c40a, 0x00007c222083f, 0x0000654a57c00,    # f4
    0x000045445441f, 0x1d087a318c400, 0x0000109f23e00, 0x0000465e17c00,    # f8
    0x0000463fafc00, 0x0000101f01000, 0x0000000000000, 0x00007ffffffff,    # fc
]


def set_glyph(index, glyph):
    if not 0 < index < 8:
        raise IndexError('index must be in range(1, 8)')
    _GLYPH_TABLE[index] = glyph


def _render_size(lines, size, margin, padding):
    cols = max(len(s) for s in lines)
    rows = len(lines)
    if cols * rows == 0:
        return (0, 0)
    return (
        cols,
        rows,
        cols * (_GLYPH_WIDTH * size + (_GLYPH_WIDTH - 1) * padding) + (cols + 1) * margin,
        rows * (_GLYPH_HEIGHT * size + (_GLYPH_HEIGHT - 1) * padding) + (rows + 1) * margin
    )


def render(lines, *, size=4, margin=3, padding=1, pos=(255, 255, 255), neg=(0, 51, 204), back=(0, 102, 255)):
    cols, rows, width, height = _render_size(lines, size, margin, padding)
    image = numpy.full((height, width, 3), back)
    for y, ys in enumerate(lines):
        by = (y + 1) * margin + y * (_GLYPH_HEIGHT * size + (_GLYPH_HEIGHT - 1) * padding)
        for x, xs in enumerate(ys.ljust(cols)):
            bx = (x + 1) * margin + x * (_GLYPH_WIDTH * size + (_GLYPH_WIDTH - 1) * padding)
            g = _GLYPH_TABLE[xs]
            for gy in range(_GLYPH_HEIGHT):
                gr = (g >> (gy * _GLYPH_WIDTH)) & ((1 << _GLYPH_WIDTH) - 1)
                py = by + (size + padding) * gy
                for gx in range(_GLYPH_WIDTH):
                    gc = (gr >> gx) & 0x01
                    px = bx + (size + padding) * gx
                    image[py:py + size, px:px + size] = pos if gc else neg
    return image


def render_image(lines, **kwargs):
    return PIL.Image.fromarray(numpy.uint8(render(lines, **kwargs)))
